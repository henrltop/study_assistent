"""
M√≥dulo de agentes para simula√ß√£o de IA no Assistente de Estudos.

Este m√≥dulo cont√©m as classes base e implementa√ß√µes stub para os agentes
que futuramente ser√£o integrados com APIs reais (OpenAI, Claude, etc.).

Arquitetura:
- BaseAgente: Interface base para todos os agentes
- AgenteStub: Implementa√ß√£o mockada para desenvolvimento
- Factory: Para instanciar agentes baseado em configura√ß√£o
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List
from django.utils import timezone
from datetime import timedelta
import random


class BaseAgente(ABC):
    """Interface base para todos os agentes de IA."""
    
    @abstractmethod
    def responder(self, pergunta: str, contexto: Dict[str, Any] = None) -> str:
        """
        Responde uma pergunta baseada no contexto fornecido.
        
        Args:
            pergunta: A pergunta do usu√°rio
            contexto: Contexto espec√≠fico (semestre_id, materia_id, etc.)
            
        Returns:
            Resposta do agente
        """
        pass
    
    @abstractmethod
    def get_tipo(self) -> str:
        """Retorna o tipo do agente."""
        pass


class AgenteStub(BaseAgente):
    """Implementa√ß√£o stub/mockada dos agentes para desenvolvimento."""
    
    def __init__(self, tipo_agente: str):
        self.tipo_agente = tipo_agente
        
        # Respostas pr√©-definidas por tipo
        self.respostas_padrao = {
            'home': [
                "Ol√°! Sou seu assistente de estudos. Em breve terei funcionalidades completas de chat!",
                "Bem-vindo ao seu assistente de estudos! Por enquanto, use as funcionalidades da agenda e mat√©rias.",
                "Oi! Estou em desenvolvimento, mas j√° posso ajudar navegando pelo sistema."
            ],
            'semestre': [
                "Sobre este semestre, posso ajudar com informa√ß√µes das mat√©rias e agenda.",
                "Este semestre tem v√°rias atividades interessantes! Quer saber mais sobre alguma mat√©ria espec√≠fica?",
                "Posso fornecer informa√ß√µes sobre as mat√©rias e eventos deste semestre."
            ],
            'materia': [
                "Como tutor desta mat√©ria, posso ajudar com os materiais dispon√≠veis e cronograma.",
                "Tenho acesso aos materiais did√°ticos desta mat√©ria. Em que posso ajudar?",
                "Posso explicar conceitos baseados nos materiais que voc√™ enviou."
            ]
        }
    
    def responder(self, pergunta: str, contexto: Dict[str, Any] = None) -> str:
        """Gera uma resposta mockada baseada no tipo e contexto."""
        
        resposta_base = random.choice(self.respostas_padrao.get(self.tipo_agente, [
            "Sou um assistente em desenvolvimento. Em breve terei mais funcionalidades!"
        ]))
        
        # Adicionar informa√ß√µes espec√≠ficas do contexto
        if contexto:
            resposta_contexto = self._gerar_resposta_contextual(pergunta, contexto)
            if resposta_contexto:
                resposta_base += f"\n\n{resposta_contexto}"
        
        # Adicionar timestamp da simula√ß√£o
        timestamp = timezone.now().strftime("%d/%m/%Y √†s %H:%M")
        resposta_base += f"\n\n---\nü§ñ *Simula√ß√£o de IA ({self.tipo_agente}) - {timestamp}*"
        
        return resposta_base
    
    def _gerar_resposta_contextual(self, pergunta: str, contexto: Dict[str, Any]) -> str:
        """Gera resposta espec√≠fica baseada no contexto."""
        
        if self.tipo_agente == 'semestre' and 'semestre' in contexto:
            return self._resposta_semestre(pergunta, contexto['semestre'])
            
        elif self.tipo_agente == 'materia' and 'materia' in contexto:
            return self._resposta_materia(pergunta, contexto['materia'])
            
        return ""
    
    def _resposta_semestre(self, pergunta: str, semestre) -> str:
        """Gera resposta espec√≠fica para contexto de semestre."""
        from academico.models import EventoAgenda
        
        respostas = []
        
        # Informa√ß√µes sobre mat√©rias do semestre
        materias = semestre.materias.filter(ativo=True)
        if materias.exists():
            materias_nomes = ", ".join([m.nome for m in materias[:3]])
            respostas.append(f"**Mat√©rias deste semestre:** {materias_nomes}")
            
            if materias.count() > 3:
                respostas.append(f"(e mais {materias.count() - 3} mat√©rias)")
        
        # Pr√≥ximos eventos do semestre
        proximos_eventos = EventoAgenda.objects.filter(
            semestre=semestre,
            data_inicio__gte=timezone.now()
        ).order_by('data_inicio')[:3]
        
        if proximos_eventos:
            eventos_texto = []
            for evento in proximos_eventos:
                data_str = evento.data_inicio.strftime("%d/%m")
                eventos_texto.append(f"‚Ä¢ {evento.titulo} ({data_str})")
            
            respostas.append("**Pr√≥ximos eventos:**")
            respostas.extend(eventos_texto)
        
        return "\n".join(respostas) if respostas else "N√£o h√° informa√ß√µes espec√≠ficas dispon√≠veis no momento."
    
    def _resposta_materia(self, pergunta: str, materia) -> str:
        """Gera resposta espec√≠fica para contexto de mat√©ria."""
        from academico.models import EventoAgenda, Tarefa
        
        respostas = []
        
        # Informa√ß√µes sobre materiais
        materiais = materia.materiais.all()[:5]
        if materiais:
            respostas.append("**Materiais dispon√≠veis:**")
            for material in materiais:
                respostas.append(f"‚Ä¢ {material.titulo} ({material.tipo})")
        
        # Pr√≥ximas tarefas
        tarefas_pendentes = materia.tarefas.filter(
            status__in=['PENDENTE', 'EM_ANDAMENTO']
        ).order_by('prazo')[:3]
        
        if tarefas_pendentes:
            respostas.append("\n**Tarefas pendentes:**")
            for tarefa in tarefas_pendentes:
                prazo_str = tarefa.prazo.strftime("%d/%m") if tarefa.prazo else "Sem prazo"
                respostas.append(f"‚Ä¢ {tarefa.titulo} ({prazo_str})")
        
        # Pr√≥ximos eventos da mat√©ria
        proximos_eventos = EventoAgenda.objects.filter(
            materia=materia,
            data_inicio__gte=timezone.now()
        ).order_by('data_inicio')[:2]
        
        if proximos_eventos:
            respostas.append("\n**Pr√≥ximos eventos:**")
            for evento in proximos_eventos:
                data_str = evento.data_inicio.strftime("%d/%m √†s %H:%M")
                respostas.append(f"‚Ä¢ {evento.titulo} ({data_str})")
        
        if not respostas:
            return "Esta mat√©ria ainda n√£o tem materiais ou atividades cadastradas."
        
        return "\n".join(respostas)
    
    def get_tipo(self) -> str:
        """Retorna o tipo do agente."""
        return self.tipo_agente


class AgenteClaude(BaseAgente):
    """Implementa√ß√£o futura para integra√ß√£o com Claude AI."""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key
        # TODO: Implementar integra√ß√£o real com Claude
    
    def responder(self, pergunta: str, contexto: Dict[str, Any] = None) -> str:
        # TODO: Implementar chamada real para a API do Claude
        return "Integra√ß√£o com Claude AI ser√° implementada em breve."
    
    def get_tipo(self) -> str:
        return "claude"


class AgenteOpenAI(BaseAgente):
    """Implementa√ß√£o futura para integra√ß√£o com OpenAI."""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key
        # TODO: Implementar integra√ß√£o real com OpenAI
    
    def responder(self, pergunta: str, contexto: Dict[str, Any] = None) -> str:
        # TODO: Implementar chamada real para a API da OpenAI
        return "Integra√ß√£o com OpenAI ser√° implementada em breve."
    
    def get_tipo(self) -> str:
        return "openai"


class AgenteFactory:
    """Factory para criar inst√¢ncias de agentes."""
    
    @staticmethod
    def criar_agente_home() -> BaseAgente:
        """Cria agente para a home."""
        return AgenteStub('home')
    
    @staticmethod
    def criar_agente_semestre() -> BaseAgente:
        """Cria agente para contexto de semestre."""
        return AgenteStub('semestre')
    
    @staticmethod
    def criar_agente_materia() -> BaseAgente:
        """Cria agente tutor para contexto de mat√©ria."""
        return AgenteStub('materia')
    
    @staticmethod
    def criar_agente_personalizado(tipo: str, configuracao: Dict[str, Any] = None) -> BaseAgente:
        """
        Cria agente personalizado baseado na configura√ß√£o.
        
        No futuro, esta fun√ß√£o verificar√° as configura√ß√µes do .env
        para decidir qual implementa√ß√£o usar (stub, claude, openai).
        """
        # TODO: Implementar l√≥gica para escolher entre diferentes provedores
        # baseado na configura√ß√£o do ambiente
        
        if tipo in ['home', 'semestre', 'materia']:
            return AgenteStub(tipo)
        
        return AgenteStub('generico')
