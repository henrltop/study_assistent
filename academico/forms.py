"""
Formul√°rios para o app acad√™mico.
"""

from django import forms
from django.core.exceptions import ValidationError
from django.utils import timezone
from django.utils.text import slugify
from .models import Materia, MaterialDidatico, EventoAgenda, Tarefa, Semestre, HorarioAula, HorarioAula
import os


class MaterialDidaticoForm(forms.ModelForm):
    """Formul√°rio para upload de materiais did√°ticos."""
    
    class Meta:
        model = MaterialDidatico
        fields = ['titulo', 'arquivo', 'tipo']
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Digite o t√≠tulo do material'
            }),
            'arquivo': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': '.pdf,.txt,.doc,.docx,.md'
            }),
            'tipo': forms.Select(attrs={
                'class': 'form-select'
            }),
        }
        labels = {
            'titulo': 'T√≠tulo do Material',
            'arquivo': 'Arquivo',
            'tipo': 'Tipo de Arquivo'
        }
        help_texts = {
            'arquivo': 'Formatos aceitos: PDF, TXT, DOC, DOCX, MD (m√°ximo 50MB)',
            'tipo': 'O tipo ser√° detectado automaticamente se n√£o informado'
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['tipo'].required = False  # Ser√° determinado automaticamente
    
    def clean_arquivo(self):
        arquivo = self.cleaned_data.get('arquivo')
        
        if not arquivo:
            raise ValidationError('√â necess√°rio selecionar um arquivo.')
        
        # Verificar tamanho do arquivo
        max_size = 50 * 1024 * 1024  # 50MB
        if arquivo.size > max_size:
            raise ValidationError('O arquivo √© muito grande. Tamanho m√°ximo: 50MB.')
        
        # Verificar extens√£o
        extensoes_permitidas = ['.pdf', '.txt', '.doc', '.docx', '.md']
        nome_arquivo = arquivo.name.lower()
        
        if not any(nome_arquivo.endswith(ext) for ext in extensoes_permitidas):
            raise ValidationError('Formato de arquivo n√£o permitido. Use: PDF, TXT, DOC, DOCX ou MD.')
        
        return arquivo
    
    def clean_titulo(self):
        titulo = self.cleaned_data.get('titulo')
        
        if not titulo or not titulo.strip():
            raise ValidationError('O t√≠tulo √© obrigat√≥rio.')
        
        return titulo.strip()


class EventoAgendaForm(forms.ModelForm):
    """Formul√°rio para cria√ß√£o/edi√ß√£o de eventos da agenda."""
    
    class Meta:
        model = EventoAgenda
        fields = ['titulo', 'descricao', 'tipo', 'data_inicio', 'data_fim']
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Digite o t√≠tulo do evento'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Descri√ß√£o do evento (opcional)'
            }),
            'tipo': forms.Select(attrs={
                'class': 'form-select'
            }),
            'data_inicio': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local'
            }),
            'data_fim': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local'
            }),
        }
        labels = {
            'titulo': 'T√≠tulo do Evento',
            'descricao': 'Descri√ß√£o',
            'tipo': 'Tipo de Evento',
            'data_inicio': 'Data e Hora de In√≠cio',
            'data_fim': 'Data e Hora de T√©rmino (opcional)'
        }
        help_texts = {
            'data_fim': 'Se n√£o informada, ser√° considerado um evento pontual',
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['data_fim'].required = False
        self.fields['descricao'].required = False
    
    def clean_titulo(self):
        titulo = self.cleaned_data.get('titulo')
        
        if not titulo or not titulo.strip():
            raise ValidationError('O t√≠tulo √© obrigat√≥rio.')
        
        return titulo.strip()
    
    def clean_data_inicio(self):
        data_inicio = self.cleaned_data.get('data_inicio')
        
        if not data_inicio:
            raise ValidationError('A data de in√≠cio √© obrigat√≥ria.')
        
        # Verificar se n√£o √© no passado (para eventos novos)
        if not self.instance.pk and data_inicio < timezone.now():
            raise ValidationError('A data de in√≠cio n√£o pode ser no passado.')
        
        return data_inicio
    
    def clean(self):
        cleaned_data = super().clean()
        data_inicio = cleaned_data.get('data_inicio')
        data_fim = cleaned_data.get('data_fim')
        
        if data_inicio and data_fim:
            if data_fim <= data_inicio:
                raise ValidationError('A data de t√©rmino deve ser posterior √† data de in√≠cio.')
        
        return cleaned_data


class TarefaForm(forms.ModelForm):
    """Formul√°rio para cria√ß√£o/edi√ß√£o de tarefas."""
    
    # Campo adicional para sugerir datas das aulas
    data_sugerida = forms.ChoiceField(
        label='Data Sugerida',
        choices=[],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'id_data_sugerida'
        }),
        help_text='Pr√≥ximas datas de aula desta mat√©ria'
    )
    
    class Meta:
        model = Tarefa
        fields = ['titulo', 'descricao', 'status', 'prazo']
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Digite o t√≠tulo da tarefa'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Descri√ß√£o da tarefa (opcional)'
            }),
            'status': forms.Select(attrs={
                'class': 'form-select'
            }),
            'prazo': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local',
                'id': 'id_prazo_manual'
            }),
        }
        labels = {
            'titulo': 'T√≠tulo da Tarefa',
            'descricao': 'Descri√ß√£o',
            'status': 'Status',
            'prazo': 'Prazo Personalizado (opcional)'
        }
        help_texts = {
            'prazo': 'Use este campo para datas personalizadas fora dos dias de aula',
        }
    
    def __init__(self, *args, materia=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['descricao'].required = False
        self.fields['prazo'].required = False
        
        # Gerar op√ß√µes de datas das aulas
        if materia:
            from datetime import datetime
            proximas_datas = materia.get_proximas_aulas(limite=10)
            
            choices = [('', 'Selecione uma data de aula')]
            for data in proximas_datas:
                dia_nome = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo'][data.weekday()]
                data_formatada = data.strftime('%Y-%m-%d')
                data_display = f"{dia_nome}, {data.strftime('%d/%m/%Y')}"
                choices.append((data_formatada, data_display))
            
            choices.append(('personalizado', 'üìÖ Data personalizada'))
            self.fields['data_sugerida'].choices = choices
    
    def clean_titulo(self):
        titulo = self.cleaned_data.get('titulo')
        
        if not titulo or not titulo.strip():
            raise ValidationError('O t√≠tulo √© obrigat√≥rio.')
        
        return titulo.strip()
    
    def clean(self):
        cleaned_data = super().clean()
        data_sugerida = cleaned_data.get('data_sugerida')
        prazo = cleaned_data.get('prazo')
        
        # Se selecionou uma data sugerida que n√£o √© personalizada
        if data_sugerida and data_sugerida != 'personalizado' and data_sugerida != '':
            from datetime import datetime
            try:
                # Converter para datetime (assumir 23:59 do dia)
                data_obj = datetime.strptime(data_sugerida, '%Y-%m-%d')
                data_obj = data_obj.replace(hour=23, minute=59)
                cleaned_data['prazo'] = timezone.make_aware(data_obj)
            except ValueError:
                pass
        
        # Validar prazo se foi informado
        prazo_final = cleaned_data.get('prazo')
        if prazo_final and prazo_final < timezone.now() - timezone.timedelta(hours=1):
            raise ValidationError('O prazo n√£o pode ser no passado.')
        
        return cleaned_data


class MateriaForm(forms.ModelForm):
    """Formul√°rio para cadastro/edi√ß√£o de mat√©rias."""
    
    class Meta:
        model = Materia
        fields = ['semestre', 'nome', 'descricao']
        widgets = {
            'semestre': forms.Select(attrs={
                'class': 'form-select'
            }),
            'nome': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Digite o nome da mat√©ria'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Descri√ß√£o da mat√©ria (opcional)'
            }),
        }
        labels = {
            'semestre': 'Semestre',
            'nome': 'Nome da Mat√©ria',
            'descricao': 'Descri√ß√£o'
        }
        help_texts = {
            'nome': 'Nome √∫nico da mat√©ria/disciplina',
            'descricao': 'Breve descri√ß√£o sobre a mat√©ria',
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Mostrar apenas semestres ativos
        self.fields['semestre'].queryset = Semestre.objects.filter(ativo=True)
        self.fields['descricao'].required = False
    
    def clean_nome(self):
        nome = self.cleaned_data.get('nome')
        
        if not nome or not nome.strip():
            raise ValidationError('O nome da mat√©ria √© obrigat√≥rio.')
        
        nome = nome.strip()
        
        # Verificar se j√° existe uma mat√©ria com este nome no mesmo semestre
        semestre = self.cleaned_data.get('semestre')
        if semestre:
            existing = Materia.objects.filter(
                semestre=semestre,
                nome__iexact=nome
            ).exclude(pk=self.instance.pk if self.instance else None)
            
            if existing.exists():
                raise ValidationError('J√° existe uma mat√©ria com este nome neste semestre.')
        
        return nome
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        
        # Gerar slug √∫nico se n√£o existe
        if not instance.slug:
            base_slug = slugify(instance.nome)
            slug = base_slug
            counter = 1
            
            while Materia.objects.filter(slug=slug).exclude(pk=instance.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            
            instance.slug = slug
        
        if commit:
            instance.save()
        
        return instance


class HorarioAulaForm(forms.ModelForm):
    """Formul√°rio para hor√°rios de aula das mat√©rias."""
    
    class Meta:
        model = HorarioAula
        fields = ['dia_semana', 'hora_inicio', 'hora_fim', 'local', 'observacoes']
        widgets = {
            'dia_semana': forms.Select(attrs={
                'class': 'form-select'
            }),
            'hora_inicio': forms.TimeInput(attrs={
                'class': 'form-control',
                'type': 'time'
            }),
            'hora_fim': forms.TimeInput(attrs={
                'class': 'form-control',
                'type': 'time'
            }),
            'local': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ex: Sala 201, Lab. de Inform√°tica'
            }),
            'observacoes': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Informa√ß√µes adicionais sobre a aula...'
            }),
        }
        labels = {
            'dia_semana': 'Dia da Semana',
            'hora_inicio': 'Hor√°rio de In√≠cio',
            'hora_fim': 'Hor√°rio de T√©rmino',
            'local': 'Local/Sala',
            'observacoes': 'Observa√ß√µes'
        }
    
    def clean(self):
        cleaned_data = super().clean()
        hora_inicio = cleaned_data.get('hora_inicio')
        hora_fim = cleaned_data.get('hora_fim')
        
        if hora_inicio and hora_fim:
            if hora_fim <= hora_inicio:
                raise ValidationError('O hor√°rio de t√©rmino deve ser posterior ao hor√°rio de in√≠cio.')
            
            # Verificar se n√£o √© uma aula muito longa (mais de 8 horas)
            from datetime import datetime, timedelta
            inicio = datetime.combine(datetime.today(), hora_inicio)
            fim = datetime.combine(datetime.today(), hora_fim)
            duracao = fim - inicio
            
            if duracao > timedelta(hours=8):
                raise ValidationError('A aula n√£o pode durar mais de 8 horas.')
        
        return cleaned_data


# FormSet para gerenciar m√∫ltiplos hor√°rios de uma vez
HorarioAulaFormSet = forms.inlineformset_factory(
    Materia, 
    HorarioAula,
    form=HorarioAulaForm,
    extra=2,  # Come√ßar com 2 hor√°rios vazios
    can_delete=True,
    min_num=0,
    validate_min=False
)

class MateriaComHorariosForm(forms.ModelForm):
    """Formul√°rio para mat√©ria com hor√°rios integrados."""
    
    class Meta:
        model = Materia
        fields = ['semestre', 'nome', 'descricao']
        widgets = {
            'semestre': forms.Select(attrs={
                'class': 'form-select'
            }),
            'nome': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Digite o nome da mat√©ria'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Descri√ß√£o da mat√©ria (opcional)'
            }),
        }
        labels = {
            'semestre': 'Semestre',
            'nome': 'Nome da Mat√©ria',
            'descricao': 'Descri√ß√£o'
        }
        help_texts = {
            'nome': 'Nome √∫nico da mat√©ria/disciplina',
            'descricao': 'Breve descri√ß√£o sobre a mat√©ria',
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Mostrar apenas semestres ativos
        self.fields['semestre'].queryset = Semestre.objects.filter(ativo=True)
        self.fields['descricao'].required = False
    
    def clean_nome(self):
        nome = self.cleaned_data.get('nome')
        
        if not nome or not nome.strip():
            raise ValidationError('O nome da mat√©ria √© obrigat√≥rio.')
        
        nome = nome.strip()
        
        # Verificar se j√° existe uma mat√©ria com este nome no mesmo semestre
        semestre = self.cleaned_data.get('semestre')
        if semestre:
            existing = Materia.objects.filter(
                semestre=semestre,
                nome__iexact=nome
            ).exclude(pk=self.instance.pk if self.instance else None)
            
            if existing.exists():
                raise ValidationError('J√° existe uma mat√©ria com este nome neste semestre.')
        
        return nome
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        
        # Gerar slug √∫nico se n√£o existe
        if not instance.slug:
            base_slug = slugify(instance.nome)
            slug = base_slug
            counter = 1
            
            while Materia.objects.filter(slug=slug).exclude(pk=instance.pk).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            
            instance.slug = slug
        
        if commit:
            instance.save()
        
        return instance
